@page "/kategorie"

@inject IJSRuntime _jsRuntime
@inject IKategorieRepository _kategorieRepository
@using Lali.Business.Repository.Kontrakte
@using Lali.Common
@using LaliWebShop.Models.Dtos
@attribute [Authorize(Roles =SD.Role_Admin)]

<DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Kategorie List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="kategorie/create" class="btn btn-primary form-control">Add Kategorie </a>
    </div>
    <div class="col-12 p-3">
        @if (Kategorien.Any())
        {
            <table class="table table-bordered">
                 <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objCat in Kategorien)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td> 
                            <td>
                            <NavLink href="@($"kategorie/edit/{objCat.Id}")" class="btn-primary btn">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                
                //loading gif
                <div class="text-center">
                <img src="/images/loading.gif">
                    </div>
            }
            else
            {
                //no records
                <p>Keine Kategorie gefunden.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<KategorieDto> Kategorien { get; set; } = new List<KategorieDto>();
    public bool IsLoading { get; set; }
    private int DeleteKategorieId { get; set; } = 0;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadKategorien();
        }
    }

    private async Task LoadKategorien()
    {
        IsLoading=true;
        StateHasChanged();
        Kategorien = await _kategorieRepository.GetAll();
        IsLoading=false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteKategorieId=id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading=true;
        if(isConfirmed && DeleteKategorieId!=0)
        {
            //delete
            await _kategorieRepository.Delete(DeleteKategorieId);
            await LoadKategorien();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading=false;
    }
}
